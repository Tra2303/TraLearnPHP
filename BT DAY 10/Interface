<?php
// Câu 1: Tạo một interface "Resizable" (Có thể điều chỉnh kích thước) với một phương thức là "resize". 
// Tạo một lớp "Rectangle" (Hình chữ nhật) và triển khai interface Resizable để thay đổi kích thước của hình chữ nhật.
interface Resizable {
    public function resize($unit);
}
class Rectangle implements Resizable {
    private $width;
    private $height;
    public function __construct($width, $height) {
        $this->width = $width;
        $this->height = $height;
    }
    public function resize($unit) {
        $this->width = ($this->width + $unit);
        $this->height = ($this->height + $unit );
    }
    public function getWidth() {
        return $this->width;
    }
    public function getHeight() {
        return $this->height;
    }
}
$rectangle = new Rectangle(4, 6);
echo "Original Width: " . $rectangle->getWidth() . "<br>";
echo "Original Height: " . $rectangle->getHeight() . "<br>"; 

$rectangle->resize(3);
echo "Resized Width: " . $rectangle->getWidth() . "<br>";
echo "Resized Height: " . $rectangle->getHeight() ;

// Câu 2: Tạo một interface "Logger" với các phương thức "logInfo", "logWarning" và "logError". 
// Tạo một lớp "FileLogger" (Ghi log vào file) và một lớp "DatabaseLogger" (Ghi log vào cơ sở dữ liệu) và triển khai interface Logger cho cả hai lớp.
interface Logger {
  public function logInfo();
  public function logWarning();
  public function logError();
}
class FileLogger implements Logger {
  public function logInfo() {
  }
  public function logWarning() {  
  }
  public function logError() {   
  }
  protected $log;
  public function __construct($log) {
      $this->log = $log;
      $this->logInfo();
      $this->logWarning();
      $this->logError();
  }
  public function getLog() {
      return $this->log;
  }
}
class DatabaseLogger implements Logger {
  public function logInfo() {
  }
  public function logWarning() {  
  }
  public function logError() {     
  }
  protected $log;
  public function __construct($log) {
      $this->log = $log;
      $this->logInfo();
      $this->logWarning();
      $this->logError();
  }
  public function getLog() {
      return $this->log;
  }
}
$FileLogger = new FileLogger("log...1");
$DatabaseLogger = new DatabaseLogger("log...2");
echo $FileLogger->getLog(). "<br>";
echo $DatabaseLogger->getLog(). "<br>";

// Câu 3: Tạo một interface "Drawable" (Có thể vẽ) với phương thức "draw". 
// Tạo một lớp "Circle" (Hình tròn) và một lớp "Square" (Hình vuông) kế thừa từ interface Drawable và triển khai phương thức draw cho mỗi hình.
interface Drawable {
    public function draw();
}
class Circle implements Drawable {
    private $radius;
    public function __construct($radius) {
        $this->radius = $radius;
    }
    public function draw() {
        return "Drawing a circle with radius $this->radius"."<br>";
    }
}
class Square implements Drawable {
    private $sideLength;
    public function __construct($sideLength) {
        $this->sideLength = $sideLength;
    }
    public function draw() {
        return "Drawing a square with side length $this->sideLength.";
    }
}
$circle = new Circle(4);
echo $circle->draw(); 

$square = new Square(6);
echo $square->draw(); 
 
// Câu 4: Tạo một interface "Sortable" với phương thức "sort". 
// Tạo một lớp "ArraySorter" (Sắp xếp mảng) và một lớp "LinkedListSorter" (Sắp xếp danh sách liên kết) và triển khai interface Sortable cho cả hai lớp.
interface Sortable {
    public function getSort();
}
class ArraySorter implements Sortable {
    protected $array;
    public function __construct($array) {
        $this->array = $array;
    }
    public function getSort() {
        sort($this->array);
        return $this->array;
    }
}
class LinkedListSorter implements Sortable {
    protected $array;
    public function __construct($array) {
        $this->array = $array;
    }
    public function getSort() {
        sort($this->array);
        return $this->array;
    }
}

$ArraySorter = new ArraySorter([5,1,3,9,7]);
$LinkedListSorter = new LinkedListSorter(["A", "B", "C"]);
echo implode(", ", $ArraySorter->getSort());
echo "<br>";
echo implode(", ", $LinkedListSorter->getSort());

// Câu 5: Tạo một interface "Encryptable" (Có thể mã hóa) với phương thức "encrypt" và "decrypt". 
// Tạo một lớp "AES" và một lớp "DES" kế thừa từ interface Encryptable và triển khai các phương thức theo thuật toán mã hóa tương ứng.
interface Encryptable {
    public function encrypt($data);
    public function decrypt($encryptedData);
}
class AES implements Encryptable {
    public function encrypt($data) {
        echo "Encrypting data using AES...";
    }
    public function decrypt($encryptedData) {
        echo "Decrypting AES encrypted data...";
    }
}
class DES implements Encryptable {
    public function encrypt($data) {
        echo "Encrypting data using DES...";
    }
    public function decrypt($encryptedData) {
        echo "Decrypting DES encrypted data...";
    }
}
$aes = new AES();
$aes->encrypt("Data to encrypt"); 
$aes->decrypt("Encrypted data"); 
echo "<br>";
$des = new DES();
$des->encrypt("Data to encrypt"); 
$des->decrypt("Encrypted data"); 
