<?php
// Câu 1: Tạo một class trừu tượng "Shape" (Hình dạng) có một phương thức trừu tượng là "calculateArea". 
//Tạo các lớp con "Circle" (Hình tròn) và "Rectangle" (Hình chữ nhật) kế thừa từ lớp Shape và triển khai phương thức calculateArea cho từng hình
abstract class Shape {
    abstract public function calculateArea();
}
class Circle extends Shape {
    private $radius;
    public function __construct($radius) {
        $this->radius = $radius;
    }
    public function calculateArea() {
        return pi() * pow($this->radius, 2);
    }
}
class Rectangle extends Shape {
    private $width;
    private $height;
    public function __construct($width, $height) {
        $this->width = $width;
        $this->height = $height;
    }
    public function calculateArea() {
        return $this->width * $this->height;
    }
}
$circle = new Circle(5);
echo "Area of the Circle: " . $circle->calculateArea() . "<br>";
$rectangle = new Rectangle(4, 8);
echo "Area of the Rectangle: " . $rectangle->calculateArea() ;

// Câu 2: Tạo một abstract class "Animal" (Động vật) với một phương thức trừu tượng là "makeSound". 
// Tạo các lớp con "Dog" (Chó) và "Cat" (Mèo) kế thừa từ lớp Animal và triển khai phương thức makeSound theo cách riêng của từng loại động vật.
abstract class Animal {
    abstract public function makeSound();
}
class Dog extends Animal {
    public function makeSound() {
       return "Dog barking woof woof"."<br>";
    }
}
class Cat extends Animal {
    public function makeSound() {
       return "Cat meow";
    }
}
$dog = new Dog();
echo $dog->makeSound(); 
$cat = new Cat();
echo $cat->makeSound(); 

// Câu 3: Tạo một abstract class "Employee" (Nhân viên) với các thuộc tính trừu tượng như "name" (tên) và "salary" (mức lương), có một phương thức trừu tượng là "getInformation". 
// Tạo các lớp con "Manager" (Quản lý) và "Staff" (Nhân viên) kế thừa từ lớp Employee và triển khai các thuộc tính và phương thức theo cách riêng của từng lớp.
abstract class Employee {
    protected $name;
    protected $salary;
    public function __construct($name, $salary) {
        $this->name = $name;
        $this->salary = $salary;
    }
    abstract public function getInformation();
    }
    class Manager extends Employee {
        public function getInformation(){
            return "Name Manager:" .$this->name. ",Salary:" .$this->salary."<br>";
        }
}
class Staff extends Employee {
    public function getInformation(){
        return "Name Staff:" .$this->name.",Salary:" .$this->salary;
    }  
}
$Manager = new Manager("Trà",20);
$Staff = new Staff("Dung",15);
echo $Manager->getInformation();
echo $Staff->getInformation();

// Câu 4: Tạo một abstract class "Vehicle" (Phương tiện) với một phương thức trừu tượng là "start". 
// Tạo các lớp con "Car" (Xe hơi) và "Motorcycle" (Xe máy) kế thừa từ lớp Vehicle và triển khai phương thức start theo cách riêng của từng loại phương tiện.
abstract class Vehicle {
    abstract public function start();
}
class Car extends Vehicle {
    public function start() {
        return "Car is starting the engine."."<br>";
    }
}
class Motorcycle extends Vehicle {
    public function start() {
        return "Motorcycle is kick-starting";
    }
}
$car = new Car();
echo $car->start(); 
$motorcycle = new Motorcycle();
echo $motorcycle->start(); 

// Câu 5: Tạo một abstract class "Database" (Cơ sở dữ liệu) với các phương thức trừu tượng như "connect", "query" và "disconnect". 
// Tạo các lớp con "MySQLDatabase" và "PostgreSQLDatabase" kế thừa từ lớp Database và triển khai các phương thức theo cách riêng của từng loại cơ sở dữ liệu.
abstract class Database {
    abstract public function connect();
    abstract public function query($sql);
    abstract public function disconnect();
}
class MySQLDatabase extends Database {
    public function connect() {
        return "Connecting to MySQL database."."<br>";
    }
    public function query($sql) {
        return "Running MySQL query: $sql"."<br>";
    }
    public function disconnect() {
        return "Disconnecting from MySQL database."."<br>";
    }
}
class PostgreSQLDatabase extends Database {
    public function connect() {
        return "Connecting to PostgreSQL database."."<br>";
    }
    public function query($sql) {
       return "Running PostgreSQL query: $sql"."<br>";
    }
    public function disconnect() {
        return "Disconnecting from PostgreSQL database."."<br>";
    }
}
$mysql = new MySQLDatabase();
echo $mysql->connect(); 
echo $mysql->query("SELECT * FROM MySQL"); 
echo $mysql->disconnect(); 

$postgres = new PostgreSQLDatabase();
echo $postgres->connect();
echo $postgres->query("SELECT * FROM PostgreSQL"); 
echo $postgres->disconnect(); 



